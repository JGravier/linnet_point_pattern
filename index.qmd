---
title: Analyse de semis de points sur un réseau spatial avec R
subtitle: Commerces parisiens au début du XIXe s.
bibliography: bibliography.bib
link-citations: true
---
nocite: '@*'
---
format:
  rzine-html: default
lang: fr-FR
date: "2024-10-10"
authors:
  - name: Laurent Beauguitte
    affiliations:
      - name: UMR Géographie-cités
        department: CNRS
        address: 5, cours des Humanités
        city: Aubervilliers Cedex
        country: France
        postal-code: 93322
    orcid: 0000-0001-8803-6056 
    url: https://esprad.hypotheses.org/cv-com-et-publis
  - name: Julie Gravier
    affiliations:
      - name: UMR ThéMA
        department: CNRS
        address: 32 rue Mégevand
        city: Besançon Cedex       
        country: France
        postal-code: 25030
    orcid: 0000-0003-0449-6499
    url: https://thema.univ-fcomte.fr/page_personnelle/jgravier
doi: 10.888.222
abstract: |
    Résumé court de la contribution (250 mots maximum)
keywords: [semis de points, réseau spatial, analyse spatiale]
---

<!---Il s'agit d'un modèle adapté [Quarto](https://quarto.org/) qui permet de combiner du texte en Markdown et du code exécutable en R.

Les consignes éditoriales et le processus de soumission d'un article à la revue Rzine sont détaillées dans [cette documentation](lien à rajouter) :

- Critères d'acceptation
- Processus éditorial
- Modèle Rzine et contenu attendu (YAML, markdown, chunks, références)
- Données mobilisées pour la démonstration.

## Exécuter du code

Cliquer sur **Render** dans l'IDE RStudio générera un article au format HTML suivant le modèle de mise en page Rzin qui contiendra votre article et son code embarqué :

```{r}
#| fenced: true

1 + 1
```


## Insérer une image

Pour incorporer une figure externe au code R, citable dans le corps du texte (@fig-1). 

```{r fig1}
#| fenced: true
#| label: fig-1
#| fig-cap: "Les articles rzine"

knitr::include_graphics("figures/article_rzine.png")
```

Ou issu du code (@fig-2)

```{r plot_basique}
#| fenced: true
#| label: fig-2
#| fig-cap: "Un plot de base"

plot(1:10)
```
--->

*JG: commentaires thématiques, clusters*

*LB: mini jeu de données*

## Définitions et questions de recherche

L'analyse d'un semis de points sur un réseau désigne un ensemble de méthodes statistiques permettant de caractériser des événements ponctuels dans le temps et dans l'espace, appelés points dans la suite du texte, prenant place sur un réseau spatial planaire, appelé réseau dans la suite du texte.

Un réseau planaire est constitué par un ensemble de sommets et un ensemble de liens entre ces sommets. Tout sommet est soit une intersection soit une extrémité. Chaque sommet est composé par un couple de coordonnées, chaque lien est caractérisable par une distance. Un lien peut par ailleurs être porteur d'attributs supplémentaires.

Deux des sujets les plus traités dans la bibliographie sont les accidents de la circulation et les actes criminels commis dans l'espace public. Dans les deux cas, des événements dramatiques pouvant être caractérisés par des attributs de types différents se produisent dans un espace pouvant être modélisé sous forme de réseau planaire (réseau routier, réseau viaire). Il est possible d'imaginer d'autres thématiques plus ou moins ponctuelles dans le temps, qu'il s'agisse de l'offre commerciale dans un espace donné, du collage militant ou publicitaire, de la présence d'équipements dans l'espace public (bancs, toilettes), etc.

Trois grands types de question sont généralement posées à ces données :

* Les points sont-ils significativement proches (ou éloignés) les uns des autres (étude du voisinage) ?
* Existe-il des lieux où la concentration des points est notable (*hot spots*) ?
* Quel modèle statistique est susceptible d'expliquer la géographie de ce semis de points ?

## Le package linnet

`linnet` est un sous-*package* du *package* `spatstat` consacré à la statistique spatiale et notamment à l'analyse de semis de points. 

## Préparer ses données

La première étape consiste à créer un objet `linnet` (*linear network*) à l'aide de deux fichiers : un fichier correspondant aux sommets (intersections et extrémités des liens), un fichier correspondant aux liens entre ces sommets. Le fichier des sommets comprend trois colonnes correspondant au nom et aux coordonnées de chaque sommet ; le fichier des liens comprend deux colonnes correspondant aux deux extrémités de chaque lien. L'orientation des liens n'est pas prise en compte : un lien *a-b* implique nécessairement un lien *b-a*, il n'est donc pas utile d'avoir deux lignes différentes.

Créer un objet lpp (*linear point pattern*) suppose d'ajouter à ce réseau planaire un semis de points. Le fichier correspondant comprend *a minima* les coordonnées de chacun des points ; il peut comprendre autant de colonnes supplémentaires que d'attributs, les attributs pouvant être de type différents (entiers, flottants, chaîne de caractère, booléen).

Dans un premier temps, nous montrons comment créer les objets linnet à partir de ses propres données. Le mini jeu de données concerne des affichages politiques dans l'espace public. Deux fichiers sont utilisés pour créer le réseau planaire : un fichier de points et leurs coordonnées ; un fichier de liens entre ces points (liens non orientés).

```{r, warning=FALSE, message=FALSE}
#chargement des packages
library(sf)
library(spatstat)

# import des fichiers
miniN <- read.table("data_mini/mini_node.txt", header=TRUE, row.names = 1,sep=",")
miniE <- read.table("data_mini/mini_edge.txt", header = FALSE, sep = ",")

# transformation en objet
NN <- ppp(miniN$x, miniN$y, c(0,10), c(0,10))
NE <- as.matrix(miniE, ncol=2)

mini <- linnet(NN, edges=NE)
class(mini)
plot(mini)
```

Deux semis de points sont ensuite importés. Le premier (mini_points.txt) concerne l'affichage politique et comprend les variables suivantes :

* x,y : coordonnées du collage 
* nb : nombre d'affiches (entier)
* pol : tendance politique (fl, extrême-gauche, fe, féministe, fr: extrême-droite)
* sti : présence d'autocollant (booléen, 0 non, 1 oui)

Le deuxième semis de points (mini-points2.txt) concerne la présence d'équipements. Il est en effet probable que la présence de certains équipements facilitent ou contraignent l'affichage militant. Il comprend les coordonnées (colonnes x et y) et une typologie (bus, arrêt de bus ; sub, station de métro ; ps : commissariat).

```{r}
semis1 <- read.table("data_mini/mini_points.txt", header=TRUE,sep=",")

#contrôle du typage des variables
str(semis1)

# typage de la variable sti
semis1$sti <- as.logical(semis1$sti)

semis2 <- read.table("data_mini/mini_points2.txt", header=TRUE,sep=",")

# transformation en semis de points sur réseau linéaire
semPOL <- lpp(semis1, mini)
semEQU <- lpp(semis2, mini)

```

Les attributs des semis de points sont appelé <tt>marks</tt> par le package. Par défaut, la fonction <pp>plot</tt> crée une visualisation par attribut et la variable visuelle s'adapte au type de l'attribut. Si l'on souhaite visualiser un attribut et un seul, on utilise l'argument <tt>which.marks</tt>.

```{r}
plot(semPOL)
plot(semPOL, which.marks = "pol")
```

L'objectif des lignes précédentes était de montrer comment créer un objet <tt>linnet</tt> de A à Z. Les objets créés sont trop pauvres pour montrer l'intérêt du *package* et, dans la suite du tutoriel, le jeu de données est issu du projet XXX. Il recense les épiceries et les bijouteries à Paris en 1839.

Le script suivant permet l'importation des données et leur transformation en objet linnet puis en objet lpp.

```{r, warning=FALSE, message=FALSE}
#chargement des packages
rm(list=ls())

library(sf)
library(spatstat)

# import du réseau viaire parisien en 1838
paris <- st_read('data/1836_jacoubet.shp')

# import des semis de points
dataG <- st_read('data/grocers_1839.gpkg')
dataJ <- st_read('data/jewellers_1839.gpkg')

# contrôle visuel des objets importés
plot(paris$geometry)
plot(dataG$geom, pch = 15, col='blue', add= TRUE)
plot(dataJ$geom, pch = 15, col='red', bg='red', add=TRUE)
```

La transformation des semis de points en objets spatstat se fait à l'aide de la fonction `as.ppp` (*planar point pattern*). Pour transformer le réseau viaire en objet `linnet`, deux étapes sont nécessaires : transformer le shapefile en objet `psp` (*planar segment pattern*) puis en objet `linnet` (*linear network*). La fonction `summary` permet de connaître les principales propriétés des objets créés.

```{r}
ppG <- as.ppp(st_geometry(dataG))
ppJ <- as.ppp(st_geometry(dataJ))

Paris <- as.psp(st_geometry(paris))
Paris <- as.linnet(Paris)

summary(Paris)
```

Concernant les informations sur le réseau viaire, la fonction `summary` renvoie :

* le nombre de sommets et de liens (*7237 vertices and 8730 lines*)
* la longueur totale du réseau (*total length 461193.7*)
* le degré maximal (*maximum vertex degree 7*)
* la connexité du réseau (*network is connected*)
* le diamètre (*diameter 10017.93*)
* le rayon (*bouding radius: 5058.732*)

Longueur totale, diamètre et rayon se basent sur la distance géographique sur le réseau planaire et non sur la distance topologique. Le diamètre donne donc ici la longueur en mètres, et non en nombre de liens, du plus long des plus courts chemins. De manière générale, toutes les méthodes implémentées dans `linnet` se basents sur les distances géographiques sur le réseau planaire étudié.

## Propriétés des objets linnet et lpp

Si on souhaite utiliser une mesure précise, il est possible d'obtenir ces informations avec des fonctions spécifiques :

* nombre de sommets (`nvertices`) 
* nombre de liens (`nsegments`)
* longueur totale du réseau (`volume`)
* diamètre du réseau planaire (`diameter`)
* rayon du réseau (distance entre le ou les sommets centraux et les sommets les plus périphériques) (`boundingradius`)

D'autres mesures sont également disponibles et notamment le degré de chaque sommet (`vertexdegree`)

Le script suivant montre quelques uns des résultats obtenus à l'aide de ces fonctions.

```{r}
# nombre de sommets
nvertices(Paris)

# longueur totale du réseau viaire (en mètres)
volume(Paris)

# degré
mean(vertexdegree(Paris))

```


Sur un objet de type `lpp` (*linear point pattern*), les principales mesures proposées sont les suivantes :

* nombre de points (`npoints`)
* nombre de points par unité de mesure (`intensity`)
* matrice des plus courtes distances entre points (`pairdist`)
* distance au plus proche voisin (`nndist`)
* identifiant du plus proche voisin (`nnwhich`)

La fonction `summary` permet là encore d'obtenir certaines de ces informations (nombre de points, nombre de points par unité), elle rappelle les caractéristiques principales du réseau (nombre de sommets, de liens et volume total) et enfin, elle fournit quartiles, médiane et moyenne des éventuels attributs numériques des points.

Le script qui suit permet de calculer ces différents éléments sur le semis des épiceries et des bijouteries à Paris.

```{r}
# semis des épiceries
# nombre de points et nombre de points par mètre
npoints(ppG)
intensity(ppG)

# plus court chemin (géographique et non topologique) entre paires de points
pairdist(ppG)[1:5,1:5]

# distance géographique au plus court voisin
nndist(ppG)[1:5] 

# identifiant du plus proche voisin
nnwhich(ppG)[1:5] 

# semis des bijouteries
npoints(ppJ)
intensity(ppG)
```

La dernière étape consiste à intégrer dans le même objet le réseau linéaire et le semis de points à l'aide de la fonction `lpp`.

```{r}
LG <- lpp(ppG, Paris)
summary(LG)

LJ <- lpp(ppJ, Paris)
summary(LJ)
```

*Faire les mesures pour les deux semis et proposer un court commentaire thématique ?*

Si l'on exécute la fonction `plot` sur un objet `lpp`, par défaut `linnet` propose un nombre de visualisations égal au nombre d'attributs des points, ces attributs étant appelés  `marks`. Si je souhaite visualiser la répartion d'un attribut *Z* donné , j'utilise la syntaxe `plot(X, which.marks='Z')` - le jeu de données utilisés ne comportant pas d'attributs pour les semis de points, cette option n'est pas mise en oeuvre dans ce tutoriel.

La visualisation de certaines mesures est intégrée par défaut dans le *package* et c'est notamment le cas pour la densité (nombre de points par unité de mesure du réseau).



```{r}
par(mfrow=c(1,2))

# calcul de la densité de points par unité de réseau
# l'option finespacing n'est pas nécessaire pour un réseau de petite taille
DEN_LJ <- density(LJ, finespacing=FALSE)
DEN_LG <- density(LJ, finespacing=FALSE)

# option couleur (par défaut)
plot(DEN_LG)

# option épaisseur des liens du réseau
plot(DEN_LG, 
     style="width", 
     adjust=0.5)  # contrôler épaisseur max
```


## Étudier les voisinages

Différences d'approche entre fonction K et méthode du plus proche voisin

Questions selon qu'on étudie un ou deux semis de points

Quelques points de comparaison :

* processus poissonien : `rpoislpp`
* processus aléatoire uniforme : `runiflpp`
* processus aléatoire : `rlpp`


### Analyser un semis de points

Fonctions: 

linearK (plus court chemin) et linearKinhom (pcc et non homogène)

linearKEuclid (distance euclidienne), linearKEuclidInhom (distance euclidienne et non homogène)

### Analyser la relation entre deux semis de points

```{r}
# étudier un semis par rapport à un autre

crossdist(ppG,ppJ)[1:5,1:5] #shortest-path distances between pairs of ‘things’ taken from two different datasets.

nncross(ppG, ppJ)[1:5,]  #sGiven two point patterns X and Y, finds the nearest neighbour in Y of each point of X.
```

Fonctions: linearKcross, linearKdot

## Rechercher les clusters

Plusieurs méthodes sont disponibles pour contrôler si le semis de points étudié s'écarte d'une répartition aléatoire pour présenter soit une répartition régulière soit une répartition concentrée sur le réseau. 

Fonctions: density

## Modéliser la géographie du semis de points

### Analyser un semis de points

### Analyser la relation entre deux semis de points

## Intérêts et limites du package

## Pour aller plus loin

Le manuel le plus complet et le plus clair concernant l'analyse de semis de points sur un réseau est celui signé Okabe et Sugihara [-@okabe2012] ; toutes les méthodes abordées par les auteurs ne peuvent être mises en oeuvre avec `linnet` (autocorrélation spatiale, modèle de Huff, etc.). L'article de Baddeley et Turner consacré à la première version du *package* [-@baddeley2005] gagne à être complété par le chapitre 17 de l'ouvrage de Baddeley *et al.* [-@baddeley2012]. À compléter par une mise à jour bibliographique récente co-signé du même Baddeley [-@baddeley2021].
