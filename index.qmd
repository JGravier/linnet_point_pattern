---
title: Analyse de semis de points sur un réseau spatial avec R
subtitle: Commerces parisiens au début du XIXe siècle
bibliography: bibliography.bib
link-citations: true
---

---
format:
  rzine-html: default
lang: fr-FR
date: "2025-05"
authors:
  - name: Laurent Beauguitte
    affiliations:
      - name: UMR Géographie-cités
        department: CNRS
        address: 5, cours des Humanités
        city: Aubervilliers Cedex
        country: France
        postal-code: 93322
    orcid: 0000-0001-8803-6056 
    url: https://esprad.hypotheses.org/cv-com-et-publis
  - name: Julie Gravier
    affiliations:
      - name: UMR ThéMA
        department: CNRS
        address: 32 rue Mégevand
        city: Besançon Cedex       
        country: France
        postal-code: 25030
    orcid: 0000-0003-0449-6499
    url: https://thema.univ-fcomte.fr/page_personnelle/jgravier
doi: XXX
abstract: |
    L’analyse d’un semis de points sur un réseau désigne un ensemble de méthodes statistiques permettant de caractériser des événements ponctuels dans le temps et dans l’espace prenant place sur un réseau spatial planaire. Deux des sujets les plus traités dans la bibliographie sont les accidents de la circulation et les actes criminels commis dans l’espace public. Il est possible d’imaginer étudier d’autres thématiques plus ou moins ponctuelles dans le temps, qu’il s’agisse de l’offre commerciale dans un espace donné, du collage militant ou publicitaire, de la présence d’équipements dans l’espace public (bancs, toilettes), de présence de biotopes le long de cours d'eau, etc. Trois grands types de question sont généralement posés à ces données : (1) les points sont-ils significativement proches (ou éloignés) les uns des autres (étude du voisinage) ? (2) Existe-t-il des lieux où la concentration des points est notable (hot spots) ? (3) Quel modèle statistique est susceptible d’expliquer la géographie de ce semis de points ? Ces trois questions sont abordées à l'aide du package R [spatstat.linnet](https://cran.r-project.org/web/packages/spatstat.linnet/index.html) de la famille [spatstat](https://cran.r-project.org/web/packages/spatstat/index.html).
keywords: [semis de points, réseau spatial, analyse spatiale]
---

# Définitions et questions de recherche

L'analyse d'un semis de points sur un réseau désigne un ensemble de méthodes statistiques permettant de caractériser des événements ponctuels dans le temps et dans l'espace, appelés points dans la suite du texte, prenant place sur un réseau spatial planaire, appelé réseau ou $L$ dans la suite du texte.

Un réseau planaire est constitué par un ensemble de sommets et un ensemble de liens entre ces sommets. Tout sommet est soit une intersection entre deux liens, soit l'extrémité d'un lien. Chaque sommet est défini par un couple de coordonnées, chaque lien est caractérisé par une distance. Un lien peut par ailleurs être porteur d'attributs supplémentaires (largeur, intensité, etc.). En géographie, les réseaux de transport terrestres, les réseaux viaires et les réseaux hydrographiques sont généralement modélisés sous forme de graphes planaires.

Deux des sujets les plus traités dans la bibliographie sont les accidents de la circulation et les actes criminels commis dans l'espace public. Dans les deux cas, des événements dramatiques pouvant être caractérisés par des attributs de types différents se produisent dans un espace pouvant être modélisé sous forme de réseau planaire (réseau routier, réseau viaire). Il est possible d'imaginer d'autres thématiques plus ou moins ponctuelles dans le temps, qu'il s'agisse de l'offre commerciale dans un espace donné, du collage militant ou publicitaire, de la présence d'équipements dans l'espace public (bancs, toilettes), de la répartition de biotopes le long d'un cours d'eau, etc.

Trois grands types de question sont généralement posées à ces données :

* les points sont-ils significativement proches (ou éloignés) les uns des autres (étude du voisinage) ?
* existe-il des lieux où la concentration des points est notable (*hot spots*) ?
* quel modèle statistique est susceptible d'expliquer la géographie de ce semis de points ?

# Le package linnet

`spatstat.linnet`^[Pour simplifier la lecture, nous parlons dans la suite du texte du _package_ `linnet`.] est un _package_ de la famille de _packages_ `spatstat` consacrés à la statistique spatiale et notamment à l'analyse de semis de points.

## Préparer ses données

La première étape consiste à créer un objet `linnet` (*linear network* ou $L$) à l'aide de deux fichiers : un fichier correspondant aux sommets (intersections et extrémités des liens), un fichier correspondant aux liens entre ces sommets. Le fichier des sommets comprend trois colonnes correspondant à l'identifiant et aux coordonnées de chaque sommet ; le fichier des liens comprend *a minima* deux colonnes correspondant aux deux extrémités de chaque lien. L'orientation des liens n'est pas prise en compte : un lien *a-b* implique nécessairement un lien *b-a*, il n'est donc pas utile d'avoir deux lignes différentes.

Créer un objet `lpp` (*linear point pattern*) suppose d'ajouter à ce réseau $L$ un semis de points. Le fichier correspondant comprend au moins les coordonnées (x,y) de chacun des points, nécessairement situés sur $L$, c'est-à-dire accrochés d'un point de vue topologique ; il peut comprendre autant de colonnes supplémentaires que d'attributs, les attributs pouvant être de types différents (entiers, flottants, chaîne de caractères, booléen). Si les coordonnées d'un sommet de ce semis de points sont situées en dehors du réseau planaire $L$, le package accroche par défaut le sommet en question au lien le plus proche. Aucun avertissement n'est affiché par le package. En revanche, quand un point est situé en dehors de la fenêtre d'observation^[Voir `owin.object` de `spatstat.geom` pour plus d'information sur la notion de fenêtre d'observation.] dans laquelle est intégré le réseau étudié, il n'est pas accroché à un lien et un message avertit que le point a été rejeté de la construction du `lpp`.

## Créer des objets `linnet` et `lpp` de A à Z et visualiser pour comprendre la structure des objets

Dans un premier temps, nous montrons comment créer les objets `linnet` à partir de ses propres données. Le mini jeu de données concerne des affichages politiques dans l'espace public. Deux fichiers sont utilisés pour créer le réseau planaire : un fichier de points et leurs coordonnées ; un fichier de liens entre ces points (liens non orientés). L'ultime point de ce dernier fichier est volontairement situé hors du réseau planaire.

```{r, warning=FALSE, message=FALSE}
# chargement des packages
library(sf) # gestion de données spatiales vectorielles
library(spatstat)
library(tibble) # construction de données tabulaires de type tibble()
library(tidyr) # modification de la forme et de la hiérarchie d'un tableau
library(dplyr) # manipulation de données tabulaires (filtrage, création de colonne, etc.)
library(stringr) # manipulation de chaîne de charactère
library(ggplot2) # construction et visualisation de graphiques

# import des fichiers
mini_node <- read.table(file = "data/data_mini/mini_node.txt", 
                        header = TRUE, 
                        row.names = 1, 
                        sep = ",")
mini_edge <- read.table("data/data_mini/mini_edge.txt", 
                        header = FALSE, 
                        sep = ",")

# transformation en objet ppp et matrice
mini_node_ppp <- ppp(x = mini_node$x, 
                     y = mini_node$y, 
                     xrange = c(0,10), 
                     yrange = c(0,10))   # coordonnées de la fenêtre d'observation
mini_edge_matrix <- as.matrix(mini_edge, 
                              ncol = 2)

mini <- linnet(vertices = mini_node_ppp, 
               edges = mini_edge_matrix)
class(mini)
plot(mini)
```

Un semis de points est ensuite importé. Il concerne l'affichage politique et comprend les variables suivantes :

* x,y : coordonnées du collage
* nb : nombre d'affiches (entier)
* pol : tendance politique (eg : extrême-gauche, fe : féministe, ed : extrême-droite)
* sti : présence d'autocollant (0 : non, 1 : oui)

Il est fréquent lorsqu'on récolte des donnnées ponctuelles que les coordonnées ne correspondent pas exactement au tracé viaire. Dans ce jeu de données, la dernière ligne concerne un point décalé d'une unité par rapport à la voie la plus proche. Le package `linnet`, par défaut, attribue ces points au segment le plus proche. Si le point est équidistant de deux segments, le package semble par défaut attribuer le point au segment le plus court. Il est donc prudent de contrôler soigneusement ses données avant toute manipulation.

```{r}
# semis sur l'affichage politique
semis_collage <- read.table("data/data_mini/mini_points.txt", 
                            header = TRUE, 
                            sep = ",") 

# contrôle du typage des variables
str(semis_collage)

# typage de la variable sti
semis_collage$sti <- as.logical(semis_collage$sti)

# transformation en semis de points sur réseau linéaire
collage_lpp <- lpp(X = semis_collage, 
                   L = mini)
```

Les attributs des semis de points sont appelé `marks` dans le _package_ `linnet`. Par défaut, la fonction `plot` crée une visualisation par attribut et la variable visuelle s'adapte au type de l'attribut. Si l'on souhaite visualiser un attribut et un seul, on utilise l'argument `which.marks`.

```{r}
plot(collage_lpp)
plot(collage_lpp, 
     which.marks = "nb")
```

La fonction `summary` permet d'obtenir des mesures basiques sur le réseau viaire et sur le semis de points.

Concernant les informations sur le réseau viaire, la fonction `summary` renvoie :

* le nombre de sommets et de liens (*8 vertices and 9 lines*)
* la longueur totale du réseau (*total length 25 units*)
* le degré maximal (*maximum vertex degree 3*)
* la connexité du réseau (*network is connected*)
* le diamètre (*diameter 11*)
* le rayon (*bouding radius: 8*)

Il est possible d'obtenir ces mesures individuellement à l'aide de fonctions spécifiques, que ce soit le nombre de sommets (`nvertices`), la longueur totale du réseau planaire (`volume`) ou le degré (`vertexdegree`).

```{r}
summary(mini)
```

Longueur totale, diamètre et rayon se basent sur la distance géographique (exprimée en unités de mesure) sur le réseau planaire et non sur la distance topologique (nombre de liens). Le diamètre donne donc ici la longueur en unités du plus long des plus courts chemins. De manière générale, toutes les méthodes implémentées dans `linnet` se basent sur les distances géographiques sur le réseau planaire étudié.

La fonction `summary` appliquée à un semis de points renvoie quant à elle les informations suivantes : propriétés de base du réseau planaire (nombre de sommets, de liens et longueur totale), nombre de points (7), intensité moyenne (*average intensity*, nombre de points par unité de mesure) et la distribution des éventuels attributs numériques et booléens.

```{r}
summary(collage_lpp)
```

Les principales mesures proposées pour caractériser un semis de points sont les suivantes :

* nombre de points (`npoints`)
* nombre de points par unité de mesure (`intensity`)
* matrice des plus courtes distances entre points (`pairdist`)
* distance au plus proche voisin (`nndist`)
* identifiant du plus proche voisin (`nnwhich`)

```{r}
npoints(collage_lpp)
intensity(collage_lpp)
pairdist(collage_lpp)
nndist(collage_lpp)[1:5] 
nnwhich(collage_lpp)[1:5] 
```

L'objectif des lignes précédentes était de montrer comment créer un objet `linnet` de A à Z et de présenter les mesures de base. Les objets créés sont cependant trop pauvres pour justifier des traitements plus avancés et, dans la suite du texte, le jeu de données est issu du projet [SoDUCo](https://soduco.geohistoricaldata.org/).

## Créer et visualiser des objets à partir de données spatiales 

Les données sont issues de l'extraction des _Annuaires_ commerciaux de la ville de Paris en 1839^[Il s'agit plus précisément de l'extraction de la liste alphabétique de l'_Annuaire Général du Commerce_ édité par Charles Lamy en 1839. Les informations plus précises sont inclues dans les métadonnées du dossier _data_ (fichier _readme.md_).]. Les deux jeux de données listent les épiciers et les bijoutiers présents dans l'espace municipal à cette date.

Le code suivant permet d'importer les données et de les transformer en objet `linnet`, puis en objet `lpp`.

```{r, warning=FALSE, message=FALSE}
# import du réseau viaire parisien en 1836
paris <- st_read("data/1836_jacoubet.gpkg")

# import des semis de points
epiciers <- st_read(dsn = "data/grocers_1839.gpkg")
bijoutiers <- st_read(dsn = "data/jewellers_1839.gpkg")

# contrôle visuel des objets importés
plot(paris$geom)
plot(epiciers$geom, 
     pch = 15, 
     col = "blue", 
     add = TRUE)
plot(bijoutiers$geom, 
     pch = 15, 
     col = "red", 
     bg = "red", 
     add = TRUE)
```

La transformation des semis de points en objets spatstat se fait à l'aide de la fonction `as.ppp` (_planar point pattern_). Pour transformer le réseau viaire en objet `linnet`, deux étapes sont nécessaires : transformer le `sf` en objet `psp` (_planar segment pattern_) puis en objet `linnet` (_linear network_). La fonction `summary` permet de connaître les principales propriétés des objets créés.

```{r}
epiciers_ppp <- as.ppp(st_geometry(epiciers))
bijoutiers_ppp <- as.ppp(st_geometry(bijoutiers))

paris_linnet <- as.psp(st_geometry(paris))
paris_linnet <- as.linnet(paris_linnet)

summary(paris_linnet)
```
Le réseau parisien est composé de 7 237 sommets et 8 730 liens. La longueur totale du réseau, exprimée ici en mètres, est de 460 km dans un diamètre de 10 km. Ce dernier représente ici la longueur du plus long des plus courts chemins entre deux sommets.

La dernière étape consiste à intégrer dans le même objet le réseau linéaire et chacun des semis de points à l'aide de la fonction `lpp`^[Il aurait été possible de créer un unique objet `lpp` composé de points caractérisés comme "bijoutiers" ou "épiciers".]. Les semis sont composés de 341 bijoutiers et 1 028 épiciers.

```{r}
epiciers_lpp <- lpp(X = epiciers_ppp, 
                    L = paris_linnet)
summary(epiciers_lpp)

bijoutiers_lpp <- lpp(X = bijoutiers_ppp, 
                      L = paris_linnet)
summary(bijoutiers_lpp)
```

Il est possible d'étudier un semis de points sur un réseau spatial selon les mêmes logiques qu'un semis dans un espace isotrope car diverses mesures ont été adaptées afin de considérer la structure du réseau [voir en particulier @okabe2012].

# Modéliser la géographie du semis de points

La modélisation du semis de points implique conceptuellement de distinguer le motif ponctuel (_point pattern_) et le processus ponctuel (_point process_), ce dernier renvoyant au processus aléatoire qui permet de générer un semis de points. Dans le cas de `linnet`, il est possible de générer différents processus stochastiques sur un réseau. Il est donc possible de comparer la répartition spatiale du semis étudié par rapport à une situation aléatoire afin de mieux caractériser les processus potentiels ayant pu mener à la situation observée.

## Répartitions aléatoires des points sur un réseau spatial

Plusieurs processus aléatoires déterminant à la fois le nombre et la distribution spatiale des points peuvent être simulés dans `linnet`. Dans le premier cas (fonction `runiflpp()`), le semis de points est généré de façon aléatoire et la position des points est fonction de la structure du réseau, en l'occurrence la longueur des tronçons : plus un tronçon est long, plus il est probable qu'il accueille un ou plusieurs points. Cette hypothèse n'est pas toujours la plus pertinente. Si on prend l'exemple des accidents de voiture, on peut supposer qu'ils sont plus fréquents à mesure que le trafic augmente (et non par la seule longueur des routes). Les deux fonctions suivantes (`rpoislpp()` et `rlpp()`) permettent de générer un semis de points aléatoire lié à une intensité variable sur le réseau.

Pour résumer, on peut simuler les trois semis suivants :

* Un processus aléatoire uniforme avec `runiflpp()`. La fonction génère $n$ points aléatoires, indépendamment et uniformément distribués, sur le réseau $L$. La probabilité de tirer un tronçon $Ls$ du réseau dépend de sa longueur dans $L$. Le point est ensuite généré selon une probabilité uniforme le long de $Ls$.
* Un processus poissonien avec la fonction `rpoislpp()`. Elle génère une réalisation du processus de Poisson avec une intensité spécifiée (paramètre `lambda`) sur le réseau $L$.
* Un processus aléatoire grâce à `rlpp()`, qui génère $n$ points aléatoires sur le réseau $L$ avec une densité de probabilité spécifiée (paramètre `f`). Cette dernière ne doit pas nécessairement être normalisée.

Quelle que soit la fonction utilisée, il est possible de spécifier le nombre de simulations souhaitées grâce au paramètre `nsim`.

```{r}
# visualisation de la génération d'une simulation selon un processus de Poisson
# avec une intensité uniforme égale à la densité moyenne
plot(x = rpoislpp(lambda = intensity(bijoutiers_lpp), # le nombre de points est variable
                  L = paris_linnet, 
                  nsim = 1),
     pch = 15, main = NULL)
```

Dans les cas de `rpoislpp()` et de `runiflpp()`, le paramètre `ex` permet d'intégrer un objet `lpp` afin de déterminer $L$, ainsi que $\lambda$ et $n$. La valeur par défaut de $\lambda$ est alors la densité moyenne des points du `lpp`, ou $n$ le nombre de points de l'objet `lpp`.

## Mesurer l'écart des distributions observées aux distributions aléatoires

Au même titre que dans le cadre d'analyse de semis de points dans un espace 

<!-- à écrire --> 
Cas des bijoutiers, distances points aléatoires VS distances observées.
Ici : proposition d'une boucle et de l'utilisation des packages de la famille du `tydiverse` à visée pédagogique, mais mieux de faire une fonction pour paralléliser le calcul matriciel si l'on a un nombre de simulations élevés (e.g. 100) et un semis initial et un réseau plus important, et d'utiliser plutôt des packages comme `dtplyr` ou directement `data.table`.

```{r, warning=FALSE}
# génération de 10 simulations
bijoutiers_10sim <- runiflpp(ex = bijoutiers_lpp, nsim = 10)

# calcul des distances entre les points simulés aléatoirement sur le réseau
list_simulated_dist <- list()

for (i in 1:length(bijoutiers_10sim)) {
    # calculs des plus courts chemins sur réseau
    dist_pi_p <- spatstat.geom::pairdist(X = bijoutiers_10sim[[i]])
    dist_pi_p[upper.tri(x = dist_pi_p, diag = TRUE)] <- NA
    
    dist_pi_p <- dist_pi_p %>%
      tibble::as_tibble() %>%
      tibble::rowid_to_column(var = "Pi") %>%
      tidyr::pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
      dplyr::filter(!is.na(dist_pi_p)) %>%
      dplyr::mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
      dplyr::mutate(type = "simulation", n_sim = i)
      
   list_simulated_dist[[i]] <- dist_pi_p   
}

# création d'un unique tableau et non d'une liste de tableaux
table_simulated_dist <- do.call(what = "rbind", args = list_simulated_dist)
table_simulated_dist
```

```{r}
# calcul des distances entre les points observés des bijoutiers en 1839
dist_bijoutiers <- spatstat.geom::pairdist(X = bijoutiers_lpp)
dist_bijoutiers[upper.tri(x = dist_bijoutiers, diag = TRUE)] <- NA
    
dist_bijoutiers <- dist_bijoutiers %>%
  as_tibble() %>%
  rowid_to_column(var = "Pi") %>%
  pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
  filter(!is.na(dist_pi_p)) %>%
  mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
  mutate(type = "observation", n_sim = NA)
```


Comparaison visuelle <!-- à commenter -->

```{r}
bijoutiers_ecart <- table_simulated_dist %>%
  dplyr::bind_rows(dist_bijoutiers)

bijoutiers_ecart %>%
  ggplot(aes(x = dist_pi_p, color = type)) +
  geom_density(linewidth = 1) +
  theme_bw()
```

Idem, cas des épiciers <!-- courbe ajoutée uniquement sans visualisation du code. A commenter -->
```{r}
#| echo: false
#| output: false

# génération de 10 simulations
epiciers_10sim <- runiflpp(ex = epiciers_lpp, nsim = 10)

# calcul des distances entre les points simulés aléatoirement sur le réseau
list_simulated_dist <- list()

for (i in 1:length(epiciers_10sim)) {
    # calculs des plus courts chemins sur réseau
    dist_pi_p <- spatstat.geom::pairdist(X = bijoutiers_10sim[[i]])
    dist_pi_p[upper.tri(x = dist_pi_p, diag = TRUE)] <- NA
    
    dist_pi_p <- dist_pi_p %>%
      tibble::as_tibble() %>%
      tibble::rowid_to_column(var = "Pi") %>%
      tidyr::pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
      dplyr::filter(!is.na(dist_pi_p)) %>%
      dplyr::mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
      dplyr::mutate(type = "simulation", n_sim = i)
      
   list_simulated_dist[[i]] <- dist_pi_p   
}

# création d'un unique tableau et non d'une liste de tableaux
table_simulated_dist <- do.call(what = "rbind", args = list_simulated_dist)
table_simulated_dist

# calcul des distances entre les points observés des épiciers en 1839
dist_epiciers <- spatstat.geom::pairdist(X = epiciers_lpp)
dist_epiciers[upper.tri(x = dist_epiciers, diag = TRUE)] <- NA
    
dist_epiciers <- dist_epiciers %>%
  as_tibble() %>%
  rowid_to_column(var = "Pi") %>%
  pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
  filter(!is.na(dist_pi_p)) %>%
  mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
  mutate(type = "observation", n_sim = NA)

epiciers_ecart <- table_simulated_dist %>%
  dplyr::bind_rows(dist_epiciers)
```


```{r}
#| echo: false

epiciers_ecart %>%
  ggplot(aes(x = dist_pi_p, color = type)) +
  geom_density(linewidth = 1) +
  theme_bw()
```


## Répartition aléatoire inhomogène

Mesurer l'écart à une répartition aléatoire inhomogène selon l'inverse de la distance au centre. <!-- expliciter choix du centre : signification -->

```{r}
center <- st_read(dsn = "data/halles.gpkg")  # Les Halles considérées comme centre économique
center_ppp <- as.ppp(st_geometry(center))    # semis de points
center_lpp <- lpp(X = center_ppp, L = paris_linnet) # semis de points sur le réseau
```

<!-- expliciter import de la fonction (vérifier encore une fois inexistance inverse de la distance) -->

```{r}
# import fonction
source(file = "local-functions.R") # adaptation de spatstat.linnet::distfun.lpp()
f_dist2_center <- distfun.inverse.lpp(X = center_lpp) # création de la fonction d'intensité
f_dist2_center
```

Répartition aléatoire inhomogène selon l'inverse de la distance au centre,
i.e. plus on s'éloigne, plus la probabilité qu'un point soit simulé sur un tronçon diminue. <!-- à commenter -->
```{r}
#| warning: false

# simulation aléatoire de Poisson
dist2_center_bijoutiers <- rpoislpp(lambda = f_dist2_center, # fonction d'intensité
                                    L = paris_linnet,               # réseau
                                    lmax = 0.05,
                                    nsim = 1)
```

Il est important de spécifier `lmax` si possible afin de diminuer le temps de calcul^[Si lambda est une fonction et `lmax` n'est pas spécifié dans `rpoislpp()`, alors la fonction génère environ 10,000 points le long des tronçons pour estimer `lmax`. Si `lmax` est spécifié avec une valeur trop élevée, le nombre de point générés aléatoirement (Poisson) avant d'appliquer la méthode de Lewis-Shedler pour accepter ou rejetter ces points générés va être très élevé et donc le temps de calcul allongé.].

```{r}
#| eval: false
lmax_known <- as.linim(f_dist2_center)
tab_lmax <- attr(x = lmax_known, which = "df")
max(tab_lmax$values)
```

Visualisation
```{r}
plot(dist2_center_bijoutiers, pch = 15)
```

Calcul des distances entre les points simulés et le centre. Deux lpp avec `crossdist.lpp()`

```{r}
#| warning: false

# génération de 10 simulations (Poisson)
bijoutiers_10sim <- rpoislpp(lambda = f_dist2_center, # fonction d'intensité
                             L = paris_linnet, # réseau
                             lmax = 0.05, # cf. plus bas
                             nsim = 10)

list_simulated_dist <- list()

for (i in 1:length(bijoutiers_10sim)) {
  dist_pi_p <- crossdist.lpp(X = bijoutiers_10sim[[i]], Y = center_lpp) # distances au plus court chemin entre deux lpp
  dist_pi_p[upper.tri(x = dist_pi_p, diag = TRUE)] <- NA
  
  dist_pi_p <- dist_pi_p %>%
    tibble::as_tibble() %>%
    tibble::rowid_to_column(var = "Pi") %>%
    tidyr::pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
    dplyr::filter(!is.na(dist_pi_p)) %>%
    dplyr::mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
    dplyr::mutate(type = "simulation", n_sim = i)
  
  list_simulated_dist[[i]] <- dist_pi_p   
}

table_simulated_dist <- do.call(what = "rbind", args = list_simulated_dist)

# calcul des distances entre les points observés des bijoutiers et le centre
dist_bijoutiers <- crossdist.lpp(X = bijoutiers_lpp, Y = center_lpp)
dist_bijoutiers[upper.tri(x = dist_bijoutiers, diag = TRUE)] <- NA

dist_bijoutiers <- dist_bijoutiers %>%
  as_tibble() %>%
  rowid_to_column(var = "Pi") %>%
  pivot_longer(cols = -Pi, names_to = "P", values_to = "dist_pi_p") %>%
  filter(!is.na(dist_pi_p)) %>%
  mutate(P = stringr::str_replace_all(string = P, pattern = "V", replacement = "")) %>%
  mutate(type = "observation", n_sim = NA)
```

Visualisation
```{r}
bijoutiers_ecart <- table_simulated_dist %>%
  dplyr::bind_rows(dist_bijoutiers)

bijoutiers_ecart %>%
  ggplot(aes(x = dist_pi_p, color = type)) +
  geom_density(linewidth = 1) +
  xlab("distance en mètres") +
  ylab("KDE") +
  theme_bw()
```


<!-- ajouter ici : possibilité de considérer plusieurs points concomitamment (i.e. des pôles) -->

## Étudier les voisinages

Différences d'approche entre fonction K et méthode du plus proche voisin

<!--Questions selon qu'on étudie un ou deux semis de points-->

Fonctions: 

linearK (plus court chemin) et linearKinhom (pcc et non homogène)

linearKEuclid (distance euclidienne), linearKEuclidInhom (distance euclidienne et non homogène)

```{r}
kth_neighbour <- seq(1, 20, 1)

nndist <- tibble()
for (i in kth_neighbour) {
  compute_nndist_bij <- nndist.lpp(X = bijoutiers_lpp, k = i)
  compute_nndist_epi <- nndist.lpp(X = epiciers_lpp, k = i)
  
  nndist <- nndist %>%
    bind_rows(tibble(type = "bijoutiers", 
                       ppv = i,
                       dist = compute_nndist_bij)) %>%
    bind_rows(tibble(type = "épiciers", 
                       ppv = i,
                       dist = compute_nndist_epi))
}

nndist_summary <- nndist %>%
  group_by(type, ppv) %>%
  summarise(mean = mean(dist), sd = sd(dist))

nndist_summary %>%
  ggplot(mapping = aes(x = ppv, y = mean, color = type)) +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), 
                width = 0.1, alpha = 0.4,
                position = position_dodge(0.05)) +
  geom_point() +
  geom_line() +
  xlab("Plus proche voisin") +
  ylab("Distance moyenne (en m.)") +
  theme_bw()
  
```


<!-- ## Analyser la relation entre deux semis de points - on vire

A évoquer dans la conclusion générale

```{r}
# étudier un semis par rapport à un autre

crossdist(epiciers_ppp, bijoutiers_ppp)[1:5, 1:5] # shortest-path distances between pairs of ‘things’ taken from two different datasets.

nncross(epiciers_ppp, bijoutiers_ppp)[1:5,]  # given two point patterns X and Y, finds the nearest neighbour in Y of each point of X.
```

Fonctions: linearKcross, linearKdot -->

## Rechercher et analyser des clusters (hot spots)
<!-- différence hot spot - cluster ? à creuser... -->
La recherche de clusters ou de hot spots, soit des zones du réseau où la densité de points est plus forte qu'attendue, suppose de comparer la répartion observée à une répartition homogène où la probabilité de chaque tronçon d'accueillir un sommet serait fonction de sa seule longueur. La fonction `intensity` renvoie ce résultat (nombre moyen de points par unité de longueur). La visualisation de certaines mesures est intégrée par défaut dans le *package* et c'est notamment le cas pour la densité (nombre de points par unité de mesure du réseau).

```{r}
# calcul de la densité de points par unité de réseau
# l'option finespacing n'est pas nécessaire pour un réseau de petite taille
densite_bij <- density.lpp(x = bijoutiers_lpp, 
                           finespacing = FALSE, 
                           distance = "path")
densite_epic <- density.lpp(epiciers_lpp, 
                            finespacing = FALSE, 
                            distance = "path")

# option couleur (par défaut)
plot(densite_epic)

# option épaisseur des liens du réseau
plot(x = densite_bij, 
     main = "Densité de bijoutiers",
     style = "width", 
     adjust = 0.5)  # contrôler épaisseur max
```

Comme dans de nombreuses visualisations proposées ces dernières années et contrairement aux règles classiques de la sémiologie graphique, plus la teinte est claire et plus la densité est élevée. 

<!-- découper, pas au bon endroit - garder un test et l'expliquer et signaler les autres tests possibles -->
Il est possible de tester la densité des points en fontion d'une variable spatiale. L'opposition socio-spatiale  ouest-est étant une donnée ancienne de Paris, on pourrait par exemple tester la densité des bijoutiers en fonction des x. Différents tests statistiques permettent ensuite de vérifier si le lien entre la densité du semis et la variable considérée est statistiquement significatif. Le test utilisé ci-dessous se base sur l'article de Mark Berman [-@berman1986]. La valeur $Z_1$, appelée aussi test de Lawson-Waller en épidémiologie, mesure l'écart entre le semis observé et un semis suivant une répartition de Poisson. <!--; il est avec la fonction `cdf.test` d'utiliser les tests de Kolmogorov-Smirnov, Cramer-von Mises ou Anderson-Darling.-->

```{r}
# bijoutiers plus présents à l'ouest ?
# test de Berman
btB <- berman.test(bijoutiers_lpp, "x")
btB
plot(btB)
```

Comparer la courbe en pointillé (distribution attendue si le semis homogène était fonction de la variation de x) et la courbe noire (distribution observée) montre une plus faible présence aux extremités de la zone observée ; inversement, les bijoutiers sont davantage présents au centre de l'espace considéré (cf la pente de la courbe pleine). Les traits verticaux indiquent la médiane, en pointillés pour la répartition uniforme, en trait plein pour la répartition observée.

Si l'on observe une relation claire - ce qui n'est pas le cas ici - entre la densité du semis de points et une variable spatiale, il est possible de modéliser la relation entre les deux et d'étudier la qualité du modèle retenu. Le script suivant est donné uniquement à des fins pédagogiques, les résultats précédents ne montrant pas de relation significative entre semis et variable considérée.

```{r, eval = FALSE}
# modéliser la relation entre présence de bijoutiers et axe ouest-est
fit <- lppm(bijoutiers_lpp ~ x)
summary(fit)
lam <- predict(fit, dimyx=512)
plot(lam)
```


<!-- à commenter quand j'aurai compris... à mettre après hot spot car logique répartition uniforme et non aléatoire-->

Caractériser la répartition du semis de points peut se fait à une échelle plus fine, celle du tronçon. Dans le cas de commerces, on pourrait par exemple supposer qu'il est plus intéressant d'être à proximité des intersections (visibilité et accessibilité plus grandes).

```{r}
# épiciers davantage présents à proximité des intersections ?
# création du objet linfun (fonction d'un réseau linéaire)
alongE <- linfun(function(x,y,seg,tp) { tp }, 
                 domain(epiciers_lpp))
# relation entre semis de point et fonction
rhoalongE <- rhohat(epiciers_lpp, alongE)
plot(rhoalongE)
```

L'axe des abscisses concerne les rues : 0 et 1 sont les deux extrémités de chaque rue et 0.5 le milieu. La ligne pointillée représente la distribution uniforme, la ligne noire la distribution observée, la zone en grisé étant l'intervalle de confiance. Les épiciers sont moins présents qu'attendu aux extrémités des rues. 

<!-- McSwiggan, G., Baddeley, A. and Nair, G. (2016) Kernel density estimation on a linear network. Scandinavian Journal of Statistics 44, 324–345. -->

# Intérêts et limites du package

Les méthodes d'analyse de semis de points sur réseaux planaires ne sont pas des méthodes statistiques stabilisées (voir par exemple une définition possible de la densité dans [@okabe2009] discutée dans [@mcswiggan2017]) et les choix des développeurs de `linnet` sont des choix possibles parmi d'autres ; ce ne sont pas nécessairement les plus pertinents pour une question de recherche donnée. Ceci pourrait expliquer le faible nombre de références présentes dans les descriptifs des fonctions. De manière générale, l'aide du seul package paraît insuffisante pour le prendre en main et il est nécessaire de la compléter avec les diverses publications des auteurs, notamment le chapitre 17 de [@baddeley2012]^[Ouvrage vendu à un tarif très élevé, visiter les archives d'Anna est recommandé.].

Une des limites concerne la non possibilité d'avoir des liens orientés sur le réseau : étudier certains phénomènes ponctuels en milieu urbain sans prendre en compte les sens de circulation automobile peut limiter l'intérêt des résultats. Il n'est pas non plus aisé de tester des hypothèses pourtant simples à formuler (lien entre semis de points et degré des sommets du réseau par exemple) tant il est nécessaire de jongler entre des objets de types différents. Créer ses propres fonctions est vite nécessaire pour tirer pleinement profit du package.

`linnet` n'est évidemment pas le seul package permettant ce type d'analyse (voir [`intensitynet`](https://cran.rstudio.com/web/packages/intensitynet/index.html) ou [`spatgraphs`](https://cran.rstudio.com/web/packages/spatgraphs/index.html)) mais il reste l'un des plus efficaces, surtout si on analyse des semis sur des réseaux de grande taille. À défaut d'être le plus simple à prendre en main, il semble l'un des plus rapides pour calculer les différents indicateurs et modèles disponibles. <!-- contrôler la doc de ces packages -->

# Pour aller plus loin

Le manuel le plus complet et le plus clair concernant l'analyse de semis de points sur un réseau est celui d'Okabe et Sugihara [-@okabe2012] ; toutes les méthodes abordées par les auteurs ne peuvent être mises en oeuvre avec `linnet` (autocorrélation spatiale, modèle de Huff, etc.). L'article de Baddeley et Turner consacré à la première version du *package* [-@baddeley2005] gagne à être complété par le chapitre 17 de l'ouvrage de Baddeley *et al.* [-@baddeley2012]. Une mise à jour bibliographique récente est co-signé du même Baddeley [-@baddeley2021].

<!---Note : à voir, densité de Kernel sur réseau dans [-@okabe2009]--->
